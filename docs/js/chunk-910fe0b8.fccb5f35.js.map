{"version":3,"sources":["webpack:///./src/components/extractDialog.vue?0a7e","webpack:///./src/contactLogic/buildr/tokens.js","webpack:///./src/contactLogic/buildr/create.js","webpack:///./src/contactLogic/earn/contractApi.js","webpack:///./src/contactLogic/earn/Reward.js","webpack:///src/components/extractDialog.vue","webpack:///./src/components/extractDialog.vue?3910","webpack:///./src/components/extractDialog.vue?083f","webpack:///./src/contacthelp/Approve.js","webpack:///./src/components/extractDialog.vue?2bd6","webpack:///./src/contacthelp/Allowances.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","model","value","callback","$$v","openClaimDialog","expression","_v","_s","$t","claimAmount","directives","name","rawName","domProps","on","$event","target","composing","extractAirdropLoading","nativeOn","sendExtractAirdrop","staticRenderFns","getProxyToActionsToken","chainID","token","synthetixTokens","find","chainId","getCollateralToken","getNameHex","web3","tokenName","currencyKey","utils","stringToHex","rightPad","useProxyActionsContractRead","library","account","methodName","parameter","contract","useproxyActionsContract","address","result","useCollateralContractRead","useCollateralContract","fetchRewardAddress","tokenCollateralAddress","collateralToken","methodName2","parameter2","Address","BigNumber","config","data","coinName","fee","rewardToken","methods","open","checkData","$Notice","warning","title","desc","components","Buttons","computed","component","require","useTokenApprove","spender","amount","useTokenContract","approveAmount","MaxUint256","estimateGas","approve","gasEstimate","gasLimit","calculateGasMargin","useTokenApproveErc20Lambda","fromValue","toValue","useErc20LambdaContract","useTokenAllowance","owner","allowance","TokenAmount","toString"],"mappings":"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","file":"js/chunk-910fe0b8.fccb5f35.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"claim-dialog\"},[_c('Modal',{attrs:{\"class-name\":\"claim-modal\",\"footer-hide\":true,\"closable\":true},model:{value:(_vm.openClaimDialog),callback:function ($$v) {_vm.openClaimDialog=$$v},expression:\"openClaimDialog\"}},[_c('div',{staticClass:\"claim-content\"},[_c('p',{staticClass:\"title text-center\"},[_vm._v(\" \"+_vm._s(_vm.$t('myPage.claim'))+\" \")]),_c('div',{staticClass:\"claim-wrapper\"},[_c('div',{staticClass:\"title-content\"},[_c('span',{staticClass:\"card-title\"},[_vm._v(_vm._s(_vm.$t('common.amount')))]),_c('div',{staticClass:\"balance-item\"},[_c('span',{staticClass:\"mr-2 text-secondary\"},[_vm._v(_vm._s(_vm.$t('common.unclaimAirdrop')))]),_c('span',[_vm._v(_vm._s(_vm.claimAmount || 0)+\" LAMB\")])])]),_c('div',{staticClass:\"claim-wrapper\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.claimAmount),expression:\"claimAmount\"}],staticClass:\"amount-input\",attrs:{\"readonly\":\"\",\"type\":\"text\"},domProps:{\"value\":(_vm.claimAmount)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.claimAmount=$event.target.value}}})])]),_c('div',{staticClass:\"btn-wrapper\"},[(!_vm.extractAirdropLoading)?_c('Buttons',{nativeOn:{\"click\":function($event){return _vm.sendExtractAirdrop($event)}}},[_vm._v(\" \"+_vm._s(_vm.$t('common.confirm'))+\" \")]):_c('Buttons',[_vm._v(\" \"+_vm._s(_vm.$t('common.loading'))+\"... \")])],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import tokenlist from \"@/constants/token.json\";\nimport synthetixTokens from \"@/constants/synthetix.json\";\n\nexport const getTokenBySymbol = (chainID, symbol) => {\n  const token = tokenlist.tokens.find((token) => {\n    return chainID === token.chainId && token.symbol === symbol;\n  });\n  return token || {};\n};\n\n/**\n * getProxyActionsToken 只用于授权操作\n * */\nexport const getProxyActionsToken = (chainID) => {\n  const token = synthetixTokens.find((token) => {\n    return chainID === token.chainId && token.name === 'ProxyActions';\n  });\n  return token || {};\n};\n\nexport const getProxyToActionsToken = (chainID) => {\n  const token = synthetixTokens.find((token) => {\n    return chainID === token.chainId && token.name === 'ProxyToActions';\n  });\n  return token || {};\n};\n\nexport const getExchangeRatesToken = (chainID) => {\n  const token = synthetixTokens.find((token) => {\n    return chainID === token.chainId && token.name === 'ExchangeRates';\n  });\n  return token || {};\n};\n\nexport const getCollateralToken = (chainID) => {\n  const token = synthetixTokens.find((token) => {\n    return chainID === token.chainId && token.name === 'Collateral';\n  });\n  return token || {};\n};\n\nexport const getCollateralStateToken = (chainID) => {\n  const token = synthetixTokens.find((token) => {\n    return chainID === token.chainId && token.name === 'CollateralState';\n  });\n  return token || {};\n};\n\n\n","import {\n  getTokenBySymbol,\n  getProxyToActionsToken,\n  getCollateralToken,\n  getExchangeRatesToken\n} from './tokens';\nimport {\n  useTokenbalance,\n  useProxyContractRead,\n  useProxyActionsContractRead,\n  useCollateralContractRead,\n  useExchangeRatesContractRead,\n  useNeedApproveInput,\n} from './contractApi';\nimport {\n  useTokenApprove,\n  useTokenApproveErc20Lambda\n} from '../../contacthelp/Approve.js';\n\n\n/**\n *  获取当前币种余额\n *  isNative = true 获取原生资产余额\n *  isNative = false 获取Erc20资产余额\n * */\nexport const fetchTokenBalance = async ({web3, tokenName, chainID, library, account, isNative}) => {\n  if(isNative && tokenName !== 'scUSD') {\n    const result = await library.getBalance(account);\n    return web3.utils.fromWei(result.toString());\n  } else {\n    const token = getTokenBySymbol(chainID, tokenName);\n    const result = await useTokenbalance(library, account, token);\n    return result.toSignificant(18);\n  }\n};\n\n/**\n * name to Hex\n */\nexport const getNameHex = (web3, tokenName) => {\n  let currencyKey = web3.utils.stringToHex(tokenName);\n  currencyKey = web3.utils.rightPad(currencyKey, 64);\n  return currencyKey;\n};\n\n/**\n *  1 首先通过ProxyActions.sol合约中的collateralAddress方法，拿到抵押品合约地址(collateralToken);\n *  2 然后通过抵押品的合约地址获取抵押合约中的状态变量。\n *\n *  isRewardClaimable：是否可提现\n *  targetRatio： 目标抵押率\n *  unlockedCollateral：可释放的LAMB\n *  collateralisationRatio：当前抵押率(倒数)\n *  mintScUSD：已铸造的scUSD\n *  currentDebt：当前债务\n *  liquidationRatio：清算抵押率\n *  feeRate：稳定费率\n *  debtCap： 全球scUSD债务上限\n *  maxMintable: 还有多少能铸造\n *  existingDebt：当前已铸造多少\n *  totalDebt：总负债\n *\n */\nexport const fetchCollateralIndicators = async ({ web3, chainID, account, library, tokenName }) => {\n  const token = getProxyToActionsToken(chainID);\n  const methodName = 'collateralAddress';\n  const currencyKey = getNameHex(web3, tokenName);\n  const parameter = [currencyKey];\n\n  const tokenCollateralAddress = await useProxyActionsContractRead(library, account, token, methodName, parameter);\n\n\n\n  const collateralToken = getCollateralToken(chainID);\n  collateralToken.address = tokenCollateralAddress;\n\n  const loadList = [\n    useCollateralContractRead(library, account, collateralToken, 'unlockedCollateral', [account]),\n    useCollateralContractRead(library, account, collateralToken, 'collateralisationRatio', [account]),\n    useCollateralContractRead(library, account, collateralToken, 'isRewardClaimable', [account]),\n    useCollateralContractRead(library, account, collateralToken, 'targetRatio', []),\n    useCollateralContractRead(library, account, collateralToken, 'liquidationRatio', []),\n    useCollateralContractRead(library, account, collateralToken, 'feeRate', []),\n    useCollateralContractRead(library, account, collateralToken, 'debtCap', []),\n    useCollateralContractRead(library, account, collateralToken, 'remainingDebt', [account])\n  ];\n\n  const [unlockedCollateral, collateralisation, isRewardClaimable, targetRatio, liquidationRatio, feeRate, debtCap, remainingDebt] = await Promise.all(loadList);\n\n\n  return {\n    isRewardClaimable,\n    targetRatio: web3.utils.fromWei(targetRatio.toString()),\n    unlockedCollateral: web3.utils.fromWei(unlockedCollateral.toString()),\n    collateralisationRatio: web3.utils.fromWei(collateralisation[0].toString()),\n    mintScUSD:  web3.utils.fromWei(collateralisation[1].toString()),\n    currentDebt:  web3.utils.fromWei(collateralisation[2].toString()),\n    liquidationRatio: web3.utils.fromWei(liquidationRatio.toString()),\n    feeRate: web3.utils.fromWei(feeRate.toString()),\n    debtCap: web3.utils.fromWei(debtCap.toString()),\n\n    maxMintable: web3.utils.fromWei(remainingDebt[0].toString()),\n    existingDebt:  web3.utils.fromWei(remainingDebt[1].toString()),\n    totalDebt:  web3.utils.fromWei(remainingDebt[2].toString()),\n  };\n};\n\n\n/**\n *  1 首先通过ProxyActions.sol合约中的collateralAddress方法，拿到抵押品合约地址(collateralToken);\n *  2 然后通过抵押品的合约地址获取抵押合约中的状态变量。\n *\n *  isRewardClaimable：是否可提现\n *  targetRatio： 目标抵押率\n *  unlockedCollateral：可释放的LAMB\n *  collateralisationRatio：当前抵押率(倒数)\n *  mintScUSD：已铸造的scUSD\n *  currentDebt：当前债务\n *  liquidationRatio：清算抵押率\n *  feeRate：稳定费率\n *  debtCap： 全球scUSD债务上限\n *  maxMintable: 还有多少能铸造\n *  existingDebt：当前已铸造多少\n *  totalDebt：总负债\n *\n */\nexport const fetchCollateralIndicatorsCurrentDebt = async ({ web3, chainID, account, library, tokenName }) => {\n  const token = getProxyToActionsToken(chainID);\n  const methodName = 'collateralAddress';\n  const currencyKey = getNameHex(web3, tokenName);\n  const parameter = [currencyKey];\n\n  const tokenCollateralAddress = await useProxyActionsContractRead(library, account, token, methodName, parameter);\n\n\n\n  const collateralToken = getCollateralToken(chainID);\n  collateralToken.address = tokenCollateralAddress;\n\n  const loadList = [\n    // useCollateralContractRead(library, account, collateralToken, 'unlockedCollateral', [account]),\n    useCollateralContractRead(library, account, collateralToken, 'collateralisationRatio', [account]),\n    // useCollateralContractRead(library, account, collateralToken, 'isRewardClaimable', [account]),\n    // useCollateralContractRead(library, account, collateralToken, 'targetRatio', []),\n    // useCollateralContractRead(library, account, collateralToken, 'liquidationRatio', []),\n    // useCollateralContractRead(library, account, collateralToken, 'feeRate', []),\n    // useCollateralContractRead(library, account, collateralToken, 'debtCap', []),\n    // useCollateralContractRead(library, account, collateralToken, 'remainingDebt', [account])\n  ];\n\n  const [collateralisation] = await Promise.all(loadList);\n\n   return web3.utils.fromWei(collateralisation[2].toString());\n  // return {\n  //   // isRewardClaimable,\n  //   // targetRatio: web3.utils.fromWei(targetRatio.toString()),\n  //   // unlockedCollateral: web3.utils.fromWei(unlockedCollateral.toString()),\n  //   // collateralisationRatio: web3.utils.fromWei(collateralisation[0].toString()),\n  //   // mintScUSD:  web3.utils.fromWei(collateralisation[1].toString()),\n  //   currentDebt:  web3.utils.fromWei(collateralisation[2].toString()),\n  //   // liquidationRatio: web3.utils.fromWei(liquidationRatio.toString()),\n  //   // feeRate: web3.utils.fromWei(feeRate.toString()),\n  //   // debtCap: web3.utils.fromWei(debtCap.toString()),\n\n  //   // maxMintable: web3.utils.fromWei(remainingDebt[0].toString()),\n  //   // existingDebt:  web3.utils.fromWei(remainingDebt[1].toString()),\n  //   // totalDebt:  web3.utils.fromWei(remainingDebt[2].toString()),\n  // };\n};\n\n\n\n/**\n * 获取货币价格\n * */\n\nexport const fetchCurrencyPrice = async ({ web3, chainID, account, library, tokenName }) => {\n  const token = getExchangeRatesToken(chainID);\n  const methodName = 'rateForCurrency';\n  const currencyKey = getNameHex(web3, tokenName);\n  const parameter = [currencyKey];\n  const tokenExchangeRates = await useExchangeRatesContractRead(library, account, token, methodName, parameter);\n\n  return {\n    currencyPrice:  web3.utils.fromWei(tokenExchangeRates.toString())\n  };\n};\n\n/* *\n *  授权scUSD授信额度\n *\n * */\n\nexport const fetchApprove = async ({ web3, chainID, account, library, tokenName, pledgeNumber }) => {\n  const proxyActionsToken = getProxyToActionsToken(chainID);\n  const methodName  = 'target' ;\n  const parameter  = [] ;\n\n  const targetToken = await useProxyContractRead(library, account, proxyActionsToken, methodName, parameter);\n\n  const mytoken = getTokenBySymbol(chainID, tokenName);\n  const amount = web3.utils.toWei(pledgeNumber);\n\n  const result = await useTokenApprove(library, account, mytoken, targetToken, amount);\n  return result;\n};\n\n/**\n *  获取已授信的额度\n *  Allowance 限额\n * */\n\n\nexport const fetchAllowanceAmount = async ({ chainID, account, library, tokenName }) => {\n  const mytoken = getTokenBySymbol(chainID, tokenName);\n\n  const proxyActionsToken = getProxyToActionsToken(chainID);\n  const methodName  = 'target' ;\n  const parameter  = [] ;\n  const targetToken = await useProxyContractRead(library, account, proxyActionsToken, methodName, parameter);\n\n  const result = await useNeedApproveInput(library, account, mytoken, targetToken);\n\n  return {\n    allowanceAmount: result.toSignificant(18)\n  };\n};\n\n\n/* *\n *  授权Lambda授信额度\n *\n * */\n\nexport const fetchLambdaApprove = async ({ web3, chainID, account, library, tokenName, pledgeNumber  }) => {\n  // 获取授权地址\n  const proxyActionsToken = getProxyToActionsToken(chainID);\n  const methodName  = 'target' ;\n  const parameter  = [] ;\n  const targetToken = await useProxyContractRead(library, account, proxyActionsToken, methodName, parameter);\n\n  const mytoken = getTokenBySymbol(chainID, tokenName);\n\n  // 获取开始授权额度，如何没有授权，默认为0;\n  const allowanceAmount = await useNeedApproveInput(library, account, mytoken, targetToken);\n  const allowance = allowanceAmount.toSignificant(18);\n\n  const fromValue = web3.utils.toWei(allowance);\n  const toValue = web3.utils.toWei(pledgeNumber);\n\n  const result = await useTokenApproveErc20Lambda(library, account, mytoken, targetToken, fromValue, toValue);\n  return result;\n};\n","import { TokenAmount } from \"@webfans/uniswapsdk\";\nimport {\n  useTokenContract,\n  useCollateralContract,\n  useproxyActionsContract,\n  useExchangeRatesContract,\n  useProxyContract,\n  useCollateralStateContract,\n  useSynthetixRewardContract\n} from \"../../contacthelp/useContract.js\";\nimport { useTokenAllowance } from \"../../contacthelp/Allowances\";\n\n/**\n *  获取某个币的数量\n * */\nexport async function useTokenbalance(library, account, token) {\n  const contract = useTokenContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract.balanceOf(account);\n  } catch (error) {\n    console.log(error);\n  }\n  return new TokenAmount(token, result.toString());\n}\n\n/**\n *  获取铸造代理只读数据\n *\n * */\n\nexport async function useProxyActionsContractRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useproxyActionsContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\n/**\n *  使用场景：\n *  获取抵押合约中的状态变量：抵押率、稳定费率，清算抵押率，全球scUSD债务上限\n *\n * */\n\nexport async function useCollateralContractRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useCollateralContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\n/**\n * 获取货币价格\n *\n * */\n\nexport async function useExchangeRatesContractRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useExchangeRatesContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\nexport async function useProxyContractRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useProxyContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\nexport async function useCollateralStateRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useCollateralStateContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\nexport function useProxyActionsContractSigna(\n  library,\n  account,\n  token\n\n) {\n  const contract = useproxyActionsContract(library, account, token.address, true);\n  console.log(contract);\n  return contract;\n}\n\nexport async function useNeedApproveInput(\n  library,\n  account,\n  token,\n  spender\n) {\n  const currentAllowance = await useTokenAllowance(\n    library,\n    account,\n    token,\n    account ?? undefined,  // 当前账户\n    spender   // 授权地址\n  );\n  console.log(currentAllowance);\n  return currentAllowance;\n}\n\n\nexport async function useSynthetixRewardRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useSynthetixRewardContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\n","import collPools from '@/constants/Collateralpool.json';\nimport {getCollateralStateToken, getCollateralToken, getProxyToActionsToken, getTokenBySymbol} from \"../buildr/tokens\";\nimport { getNameHex } from '../buildr/create';\nimport {\n  useCollateralContractRead,\n  useCollateralStateRead,\n  useProxyActionsContractRead,\n  useProxyActionsContractSigna,\n  useSynthetixRewardRead\n} from \"./contractApi\";\n\nimport {calculateGasMargin} from \"../../contacthelp/utils\";\nimport getChainCoinInfo from '../../constants/networkCoinconfig';\n\n\n\n/**\n *  获取抵押资产\n *  1 通过ProxyActions.sol合约获取tokenCollateralAddress\n *  2 根据tokenCollateralAddress 通过Collateral.sol合约获取 tokenCollateralStateAddress\n *  3 根据 tokenCollateralStateAddress 通过CollateralState.sol中accountCollateral方法获取抵押资产：accountCollateral\n * */\n\nexport const fetchRewardAddress = async ({ web3, chainID, account, library, tokenName }) => {\n\n    const token = getProxyToActionsToken(chainID);\n    const methodName = 'collateralAddress';\n    const currencyKey = getNameHex(web3, tokenName);\n    const parameter = [currencyKey];\n    const tokenCollateralAddress = await useProxyActionsContractRead(library, account, token, methodName, parameter);\n  \n    const collateralToken = getCollateralToken(chainID);\n    collateralToken.address = tokenCollateralAddress;\n  \n    const methodName2 = 'rewarderAddress';\n    const parameter2 = [];\n    const Address = await useCollateralContractRead(library, account, collateralToken, methodName2, parameter2);\n\n    return Address;\n  };\n\n\n\n  export const getUnClaimedReward = async ({ web3, chainID, account, library, tokenName }) => {\n    \n      const Address = await fetchRewardAddress({ web3, chainID, account, library, tokenName }) ;\n      const objToken =  getCollateralToken(chainID);\n\n      objToken.address = Address;\n\n\n\n    // const token = getProxyToActionsToken(chainID);\n    // const methodName = 'collateralAddress';\n    // const currencyKey = getNameHex(web3, tokenName);\n    // const parameter = [currencyKey];\n    // const tokenCollateralAddress = await useProxyActionsContractRead(library, account, token, methodName, parameter);\n  \n    // const collateralToken = getCollateralToken(chainID);\n    // collateralToken.address = tokenCollateralAddress;\n  \n    const methodName = 'getUnClaimedReward';\n    const parameter = [account];\n\n    const result = await useSynthetixRewardRead(library, account, objToken, methodName, parameter);\n\n    return result;\n  };\n\n\n  ","<template>\n  <div class=\"claim-dialog\">\n    <Modal v-model=\"openClaimDialog\" class-name=\"claim-modal\" :footer-hide=\"true\" :closable=\"true\">\n      <div class=\"claim-content\">\n        <p class=\"title text-center\">\n          {{ $t('myPage.claim') }}\n        </p>\n        <div class=\"claim-wrapper\">\n          <div class=\"title-content\">\n            <span class=\"card-title\">{{ $t('common.amount') }}</span>\n            <div class=\"balance-item\">\n              <span class=\"mr-2 text-secondary\">{{ $t('common.unclaimAirdrop') }}</span>\n              <span>{{ claimAmount || 0 }} LAMB</span>\n            </div>\n          </div>\n          <div class=\"claim-wrapper\">\n            <input v-model=\"claimAmount\" readonly type=\"text\" class=\"amount-input\">\n          </div>\n        </div>\n\n        <div class=\"btn-wrapper\">\n          <Buttons v-if=\"!extractAirdropLoading\" @click.native=\"sendExtractAirdrop\">\n            {{ $t('common.confirm') }}\n          </Buttons>\n          <Buttons v-else>\n            {{ $t('common.loading') }}...\n          </Buttons>\n        </div>\n      </div>\n    </Modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { fetchRewardAddress } from '@/contactLogic/earn/Reward.js';\nimport event from '@/common/js/event';\nconst BigNumber = require('bignumber.js');\nBigNumber.config({ DECIMAL_PLACES: 6, ROUNDING_MODE: BigNumber.ROUND_DOWN });\nimport { withdrawAirDropValue } from '@/contactLogic/AirDrop.js';\nexport default {\n  data() {\n    return {\n      openClaimDialog: false,\n      claimAmount: '',\n      data: {},\n      coinName: '',\n      extractAirdropLoading: false,\n      fee: '',\n      rewardToken: '',\n    };\n  },\n  methods: {\n    open(data) {\n      console.log({ data });\n      this.claimAmount = data;\n      this.openClaimDialog = true;\n    },\n    checkData() {\n      if (this.claimAmount <= 0) {\n        this.$Notice.warning({\n          title: this.$t('notice.n'),\n          desc: this.$t('notice.n31'),\n        });\n        return false;\n      }\n      return true;\n    },\n    async getAddress() {\n      const obj = {};\n      try {\n        const web3 = this.web3;\n        const chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        const tokenName = 'LAMB';\n        const address = await fetchRewardAddress({ web3, chainID, account, library, tokenName });\n        obj.address = address;\n        return obj;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    // 提取收益\n    async sendExtractAirdrop() {\n      if (!this.checkData()) {\n        return false;\n      }\n      this.extractAirdropLoading = true;\n      try {\n        const chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        const result = await withdrawAirDropValue(library, account, chainID);\n        // console.log('领取的奖励', result);\n        this.$Notice.success({\n          title: this.$t('notice.n33'),\n        });\n        event.$emit('sendtx', [\n          result,\n          {\n            okinfo: `${this.$t('common.claimAirdrop')} ${this.claimAmount} LAMB ${this.$t('notice.n42')}`,\n            failinfo: `${this.$t('common.claimAirdrop')} ${this.$t('notice.n43')}`,\n          },\n        ]);\n      } catch (error) {\n        console.log(error);\n        this.$Notice.error({\n          title: this.$t('notice.n32'),\n        });\n      } finally {\n        const timer = setTimeout(() => {\n          this.openClaimDialog = false;\n          this.extractAirdropLoading = false;\n          clearTimeout(timer);\n        }, 1000);\n      }\n    },\n  },\n  components: {\n    Buttons: () => import('@/components/basic/buttons'),\n  },\n  computed: {\n    ...mapState(['ethersprovider', 'ethChainID', 'ethAddress', 'chainTokenPrice', 'web3']),\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.claim-modal {\n  background: #ffffff;\n  box-shadow: 0px 0px 40px 0px rgba(0, 0, 0, 0.06);\n  border-radius: 12px;\n  .claim-content {\n    .title {\n      height: 28px;\n      font-size: 24px;\n      font-weight: 500;\n      color: #14171c;\n      line-height: 28px;\n      margin-bottom: 24px;\n    }\n    .claim-wrapper {\n      .title-content {\n        overflow: hidden;\n        margin: 24px 0 8px;\n        span {\n          float: left;\n        }\n        .balance-item {\n          float: right;\n          font-size: 12px;\n          font-weight: 500;\n          line-height: 14px;\n        }\n      }\n      .claim-wrapper {\n        width: 100%;\n        height: 72px;\n        background: #f7f8f9;\n        border-radius: 6px;\n        position: relative;\n        .amount-input {\n          width: 100%;\n          height: 100%;\n          outline: none;\n          border: none;\n          background: #f7f8f9;\n          font-size: 40px;\n          line-height: 47px;\n          color: #14171c;\n          padding: 16px;\n          caret-color: #0058ff;\n          &:focus {\n            border: 1px solid #0058ff;\n            border-radius: 4px;\n          }\n        }\n        .unit {\n          cursor: pointer;\n          position: absolute;\n          right: 16px;\n          top: 28px;\n        }\n      }\n    }\n    .price-wrapper {\n      margin-top: 30px;\n      .price-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      span {\n        height: 14px;\n        font-size: 12px;\n        font-weight: 500;\n        color: #828489;\n        line-height: 14px;\n      }\n      p {\n        height: 14px;\n        font-size: 12px;\n        font-weight: 500;\n        color: #14171c;\n        line-height: 14px;\n        margin-bottom: 8px;\n      }\n    }\n    .btn-wrapper {\n      margin-top: 24px;\n      .button-wrapper {\n        height: 48px;\n      }\n    }\n  }\n}\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./extractDialog.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./extractDialog.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./extractDialog.vue?vue&type=template&id=f6bec3c6&scoped=true&\"\nimport script from \"./extractDialog.vue?vue&type=script&lang=js&\"\nexport * from \"./extractDialog.vue?vue&type=script&lang=js&\"\nimport style0 from \"./extractDialog.vue?vue&type=style&index=0&id=f6bec3c6&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"f6bec3c6\",\n  null\n  \n)\n\nexport default component.exports","import { Token, TokenAmount } from \"@webfans/uniswapsdk\";\nimport { MaxUint256, Zero} from \"@ethersproject/constants\";\nimport { useTokenContract, useErc20LambdaContract } from \"./useContract.js\";\nimport {\n  calculateGasMargin,\n\n} from \"./utils.js\";\nconst BigNumber = require(\"bignumber.js\");\n\nexport async function useTokenApprove(\n    library,\n    account,\n    token,\n    spender,\n    amount\n  ) {\n    const contract = useTokenContract(library, account, token.address, true);\n\n\n    let result,gasEstimate;\n\n    //MaxUint256\n    // const bigAmount = new BigNumber(amount);\n    // const approveAmount = bigAmount.times('1.1').toFixed(0);\n    const approveAmount = MaxUint256;\n    console.log(contract, 3333222);\n\n    try {\n        gasEstimate = await contract.estimateGas.approve(spender,approveAmount);\n        result = await contract.approve(spender,approveAmount,{\n          gasLimit: calculateGasMargin(gasEstimate)\n        });\n    } catch (error) {\n      console.log(error);\n    }\n\n    return result;\n  }\n\n\nexport async function useTokenApproveErc20Lambda(\n  library,\n  account,\n  token,\n  spender,\n  fromValue,\n  toValue,\n) {\n  const contract = useErc20LambdaContract(library, account, token.address, true);\n\n  let result;\n  // fromValue = Zero;\n  try {\n    const gasEstimate = await contract.estimateGas.approve(spender, fromValue, toValue);\n    result = await contract.approve(spender, fromValue, toValue, {\n      gasLimit: calculateGasMargin(gasEstimate)\n    });\n  } catch (error) {\n    console.log(error);\n  }\n\n  return result;\n}\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./extractDialog.vue?vue&type=style&index=0&id=f6bec3c6&lang=less&scoped=true&\"","import { Token, TokenAmount } from \"@webfans/uniswapsdk\";\n\nimport { useTokenContract } from \"./useContract.js\";\n\nexport async function useTokenAllowance(\n  library,\n  account,\n  token,\n  owner,\n  spender\n) {\n  const contract = useTokenContract(library, account, token.address, false);\n\n\n  let allowance;\n  try {\n    allowance = await contract.allowance(owner, spender);\n  } catch (error) {\n    console.log(error);\n  }\n\n\n  return new TokenAmount(token, allowance.toString());\n}\n"],"sourceRoot":""}