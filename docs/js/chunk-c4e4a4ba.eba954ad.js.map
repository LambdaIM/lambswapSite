{"version":3,"sources":["webpack:///./src/views/earn/utils/helpUtils/useContract.js","webpack:///./src/views/earn/utils/helpUtils/mineUtilFunc.js","webpack:///./src/views/earn/utils/helpUtils/allowances.js"],"names":["isAddress","value","getAddress","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","address","ABI","AddressZero","Error","Contract","useContract","withSignerIfPossible","undefined","error","useStakingRewardsContract","tokenAddress","ERC20_ABI_StakingRewards","useTokenContract","ERC20_ABI","usemLAMBContract","mLAMBBarAbi","BigNumber","require","getTokenInfo","chainID","result","_","find","tokenlist","tokens","item","chainId","toString","StakingRewardListbatch","list","multiSymbolData","forEach","kind","push","callList","element","TokenAContract","useStakingRewardsContractMulticall","rewardRate","stakingToken","totalSupply","rewardsToken","ethcallProvider","Provider","init","all","infoList","j","index","length","stakingToken_","rewardsToken_","rewardRateNumber","div","toNumber","totalSupplyNumber","rewardTokenSymbol","data","LPTokenAddress","rewardToken","symbol","earned","balance","LPTokenbalance","stakingTokenContract","useTokenContractMulticall","balanceOf","infoList2","jj","stakingbalance","earn","haveStack","getFarmList","mlambBarContractCall","totalSupplycall","token","totalSupplyShare","decimalPlaces","useTokenBalance","totalAsset","totalSupplyAPY","totalAssetAPY","toExact","mlambReward","axios","get","mlambData","PoolSupplierReward","config","defaultReward","mlambRewardPerDay","times","big0","share","isEqualTo","rewards","plus","allShares","apy","minus","targetNum","isLessThan","balanceShare","myAsset","rewardTokenAddress","balancecall","useSushiBarEnter","amount","contract","estimateGas","enter","safeGasEstimate","gasLimit","calculateGasMargin","useSushiBarLeave","leave","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","useStakingRewardsbalance","TokenAmount","useStakingRewardstotalSupply","useStakingRewardsRead","methodName","parameter","useStakingRewardsContractSigna"],"mappings":"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","file":"js/chunk-c4e4a4ba.eba954ad.js","sourcesContent":["import ERC20_ABI_StakingRewards from \"@/constants/abis/StakingRewards.json\";\nimport ERC20_ABI from \"@/constants/abis/erc20.json\";\nimport mLAMBBarAbi from \"@/constants/abis/mLAMBBar.json\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { AddressZero } from \"@ethersproject/constants\";\n\n\nexport function isAddress(value) {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n}\n\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n}\n\n\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n}\n\n\nfunction getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}\n\nfunction useContract(library, account, address, ABI, withSignerIfPossible = true) {\n  if (!address || !ABI || !library) return null;\n  try {\n    return getContract(\n      address,\n      ABI,\n      library,\n      withSignerIfPossible && account ? account : undefined\n    );\n  } catch (error) {\n    console.error(\"Failed to get contract\", error);\n    return null;\n  }\n}\n\nexport function useStakingRewardsContract(library, account, tokenAddress, withSignerIfPossible) {\n  return useContract(\n    library,\n    account,\n    tokenAddress,\n    ERC20_ABI_StakingRewards,\n    withSignerIfPossible\n  );\n}\n\nexport function useTokenContract(\n  library,\n  account,\n  tokenAddress,\n  withSignerIfPossible\n) {\n  return useContract(\n    library,\n    account,\n    tokenAddress,\n    ERC20_ABI,\n    withSignerIfPossible\n  );\n}\n\n\nexport function usemLAMBContract(\n  library,\n  account,\n  tokenAddress,\n  withSignerIfPossible\n) {\n  return useContract(\n    library,\n    account,\n    tokenAddress,\n    mLAMBBarAbi,\n    withSignerIfPossible\n  );\n}","import multiSymbolData from \"@/constants/earnList.json\";\nimport tokenlist from \"@/constants/token.json\";\nimport config from \"@/config/config.js\";\nimport { TokenAmount } from \"@webfans/uniswapsdk\";\nimport _ from 'underscore';\nconst BigNumber = require('bignumber.js');\nBigNumber.config({ DECIMAL_PLACES: 6, ROUNDING_MODE: BigNumber.ROUND_DOWN });\n\n\nimport { useStakingRewardsbalance, useStakingRewardstotalSupply, useStakingRewardsRead, useTokenBalance, useTokentotalSupply } from \"./allowances.js\";\nimport { usemLAMBContract } from './useContract.js';\n\nimport { Provider } from '@webfans/ethers-multicall';\n\nimport { useStakingRewardsContractMulticall, useTokenContractMulticall, mlambBarContractCall } from \"@/contacthelp/useContractMulticall.js\";\n\nimport { calculateGasMargin } from \"@/contacthelp/utils.js\";\n\nimport axios from 'axios';\n\nfunction getTokenInfo(chainID, address) {\n    let result;\n    _.find(tokenlist.tokens, (item) => {\n        if (item.chainId === chainID && item.address.toString() === address.toString()) {\n            result = item;\n        }\n    });\n    return result;\n}\n\nexport async function StakingRewardList(library, account, chainID) {\n    // console.log({library, account, chainID});\n    const list = multiSymbolData || [];\n    const result = [];\n\n    list.forEach((item) => {\n        if (item.chainId === chainID) {\n            result.push(item);\n        }\n    });\n\n    for (let index = 0; index < result.length; index++) {\n        const element = result[index];\n        let balance, totalSupply, rewardRate, earned, rewardToken, TokenAddress, TokenAddressbalance;\n        const originRewardRate = await useStakingRewardsRead(library, account, element, 'rewardRate', []);\n        totalSupply = await useStakingRewardstotalSupply(library, account, element);\n        rewardRate = new TokenAmount(element, originRewardRate.toString());\n        // 未连接钱包状态\n        if (!account) {\n            element.data = {\n                balance: '',\n                totalSupply: totalSupply.toSignificant(6),\n                rewardRate: rewardRate.toSignificant(6),\n                LPTokenAddress: '',\n                earned: '',\n                rewardToken: '',\n                LPTokenbalance: '',\n            };\n        } else {\n            try {\n                const rewardsTokenAddress = await useStakingRewardsRead(library, account, element, 'rewardsToken', []);\n\n                rewardToken = getTokenInfo(chainID, rewardsTokenAddress);\n\n                balance = await useStakingRewardsbalance(library, account, element);\n\n                //  TokenAddress = await useStakingRewardsRead(library,account,element,'stakingToken',[]);\n                earned = await useStakingRewardsRead(library, account, element, 'earned', [account]);\n\n                TokenAddress = await useStakingRewardsRead(library, account, element, 'stakingToken', []);\n\n                const newToken = _.clone(element);\n                newToken.address = TokenAddress;\n                TokenAddressbalance = await useStakingRewardsbalance(library, account, newToken);\n\n                earned = new TokenAmount(element, earned.toString());\n\n                //  console.log('TokenAddress',TokenAddress)\n\n            } catch (error) {\n                console.log(error);\n            }\n            element.data = {\n                balance: balance.toSignificant(6),\n                totalSupply: totalSupply.toSignificant(6),\n                rewardRate: rewardRate.toSignificant(6),\n                LPTokenAddress: TokenAddress,\n                earned: earned.toSignificant(6),\n                rewardToken: rewardToken.symbol,\n                LPTokenbalance: TokenAddressbalance.toSignificant(6),\n            };\n        }\n        element.tokens = [];\n        _.find(tokenlist.tokens, (item) => {\n            if (item.chainId === chainID && element.symbol.indexOf(item.symbol) > -1) {\n                element.tokens.push(item);\n\n            }\n\n        });\n\n\n    }\n    return result;\n}\n\n\nexport async function StakingRewardListbatch(library, account, chainID) {\n    console.log({ library, account, chainID });\n    const list = multiSymbolData || [];\n    const result = [];\n    list.forEach((item) => {\n        if (item.chainId === chainID && item.kind === 'multi') {\n            result.push(item);\n        }\n    });\n    let callList = [];\n    result.forEach((element) => {\n        const TokenAContract = useStakingRewardsContractMulticall(element);\n        callList.push(TokenAContract.rewardRate());\n        callList.push(TokenAContract.stakingToken());\n        callList.push(TokenAContract.totalSupply());\n        callList.push(TokenAContract.rewardsToken());\n    });\n    const ethcallProvider = new Provider(library, chainID);\n    await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n    const infoList = await ethcallProvider.all(callList);\n    console.log({ infoList });\n\n\n    callList = [];\n    let j = 0;\n\n    for (let index = 0; index < infoList.length; index += 4) {\n        const element = result[j];\n        j++;\n        const rewardRate = infoList[index];\n        const totalSupply = infoList[index + 2];\n        const stakingToken_ = infoList[index + 1];\n        const rewardsToken_ = infoList[index + 3];\n\n        // 不需要链接钱包就能获取到的数据\n        const rewardRateNumber = new BigNumber(rewardRate.toString()).div('1e18').toNumber();\n        const totalSupplyNumber = new BigNumber(totalSupply.toString()).div('1e18').toNumber();\n        // console.log({totalSupplyNumber});\n        const rewardTokenSymbol = getTokenInfo(chainID, rewardsToken_);\n        element.data = {\n            rewardRate: rewardRateNumber,\n            LPTokenAddress: stakingToken_,\n            totalSupply: totalSupplyNumber,\n            rewardToken: rewardTokenSymbol.symbol,\n        };\n        // 未连接钱包状态\n        if (!account) {\n            element.data = {\n                earned: '',\n                balance: '',\n                LPTokenbalance: '',\n                rewardRate: rewardRateNumber,\n                LPTokenAddress: stakingToken_,\n                totalSupply: totalSupplyNumber,\n                rewardToken: rewardTokenSymbol.symbol,\n            };\n        } else {\n            const stakingToken = {\n                address: stakingToken_\n            };\n            try {\n                // const rewardTokenContract = useTokenContractMulticall(rewardToken);\n                const stakingTokenContract = useTokenContractMulticall(stakingToken);\n                const TokenAContract = useStakingRewardsContractMulticall(element);\n                // callList.push(rewardTokenContract.balanceOf(account));\n                callList.push(stakingTokenContract.balanceOf(account));\n                callList.push(TokenAContract.earned(account));\n                callList.push(TokenAContract.balanceOf(account));\n            } catch (error) {\n                console.log(error);\n            }\n            const infoList2 = await ethcallProvider.all(callList);\n            // console.log('infoList2',infoList2);\n            let jj = 0;\n            for (let index = 0; index < infoList2.length; index += 3) {\n                const element = result[jj];\n                // console.log({ element });\n                jj++;\n                // const rewardbalance = infoList2[index];\n                const stakingbalance = infoList2[index];\n                const earn = infoList2[index + 1];\n                const haveStack = infoList2[index + 2];\n\n                // 链接钱包后获取剩下的数据\n                element.data['LPTokenbalance'] = new BigNumber(stakingbalance.toString()).div('1e18').toNumber();\n                element.data['earned'] = new BigNumber(earn.toString()).div('1e18').toNumber();\n                element.data['balance'] = new BigNumber(haveStack.toString()).div('1e18').toNumber();\n\n            }\n        }\n    }\n    return result;\n}\n\nexport async function getFarmList(library, account, chainID) {\n    // console.log({library, account, chainID});\n    const list = multiSymbolData || [];\n    const result = [];\n    list.forEach((item) => {\n        if (item.chainId === chainID && item.kind === 'depositMLAMB') {\n            result.push(item);\n        }\n    });\n\n    for (let index = 0; index < result.length; index++) {\n        const item = result[index];\n        const TokenAContract = mlambBarContractCall(item);\n        const ethcallProvider = new Provider(library, chainID);\n        await ethcallProvider.init();\n        // console.log({TokenAContract});\n        const totalSupplycall = TokenAContract.totalSupply();\n        const [totalSupply] = await ethcallProvider.all([totalSupplycall]);\n        const token = _.find(tokenlist.tokens, (token) => {\n            return item.symbol === token.symbol && item.chainId === token.chainId;\n        });\n\n        // 总质押xmlamb(份额)\n        const totalSupplyShare = new BigNumber(totalSupply.toString()).div('1e18').decimalPlaces(6).toNumber();\n\n        // 总质押mlamb\n        const totalAsset = await useTokenBalance(library, item.address, token);\n\n        const totalSupplyAPY = new BigNumber(totalSupplyShare.toString());\n        const totalAssetAPY = new BigNumber(totalAsset.toExact());\n        let mlambReward;\n        try {\n            const mlambData = await axios.get(`https://explorer.lambdastorage.com/api/proxy/pledgeInfo`);\n            mlambReward = mlambData.data.data.PoolSupplierReward;\n        } catch (error) {\n            mlambReward = config.defaultReward;\n        }\n\n        const mlambRewardPerDay = new BigNumber(mlambReward).div(365).times(totalAssetAPY.toString());\n\n        console.log(mlambRewardPerDay.toString());\n\n        const big0 = new BigNumber('0');\n        // console.log(`supplyshare: ${totalSupplyAPY.toString()}, totalAsset: ${totalAssetAPY.toString()}`);\n\n        // console.log(totalSupplyAPY.toNumber(),totalAssetAPY.toNumber());\n        let share;\n\n        if (totalSupplyAPY.isEqualTo(big0) || totalAssetAPY.isEqualTo(big0)) {\n            share = new BigNumber('1');\n        } else {\n            share = totalSupplyAPY.div(totalAssetAPY);\n        }\n\n        // console.log(share.toNumber());\n        const rewards = totalAssetAPY.plus(1).plus(mlambRewardPerDay).toString();\n        const allShares = totalSupplyAPY.plus(share).toString();\n        // console.log(`share: ${share.toString()}`);\n        // console.log( `rewards:${rewards.toString()} , allshare: ${allShares.toString()}`);\n\n        let apy = share.times(rewards).div(allShares).minus(1).times(365).times(100).decimalPlaces(2);\n\n        console.log('totalSupplyAPY', totalSupplyAPY.toString());\n        console.log('totalAssetAPY', totalAssetAPY.toString());\n        console.log('share', share.toString());\n        console.log('apy', apy.toString());\n        const targetNum = new BigNumber('0.000001');\n        if (apy.isLessThan(targetNum)) {\n            apy = `<0.0001`;\n        }\n        // console.log(apy.toNumber());\n        console.log(totalSupplyShare);\n        // 未连接钱包\n        if (!account) {\n            item.data = {\n                totalSupplyShare: totalSupplyShare,\n                balanceShare: '',\n                totalAsset: totalAssetAPY.decimalPlaces(2),\n                myAsset: '',\n                rewardTokenAddress: token.address,\n                apy: apy\n                    // claimedReward:claimedReward.toSignificant(6)\n            };\n        } else {\n            const balancecall = TokenAContract.balanceOf(account);\n            const [balance] = await ethcallProvider.all([balancecall]);\n            // 个人账户xmlamb\n            const balanceShare = new BigNumber(balance.toString()).div('1e18').decimalPlaces(6).toNumber();\n            // 总资产\n\n            const myAsset = new BigNumber(balanceShare).times(totalAsset.toExact()).div(totalSupplyShare.toString()).decimalPlaces(6).toNumber();\n            item.data = {\n                totalSupplyShare: totalSupplyShare,\n                balanceShare: balanceShare,\n                totalAsset: totalAssetAPY.decimalPlaces(2),\n                myAsset: myAsset,\n                rewardTokenAddress: token.address,\n                apy: apy\n                    // claimedReward:claimedReward.toSignificant(6)\n            };\n        }\n    }\n    return result;\n}\n\n// 质押mLAMB\nexport async function useSushiBarEnter(library, account, token, amount) {\n    const contract = usemLAMBContract(library, account, token.address, true);\n    let result;\n    try {\n        const safeGasEstimate = await contract.estimateGas.enter(amount);\n        result = await contract.enter(amount, {\n            gasLimit: calculateGasMargin(safeGasEstimate),\n        });\n    } catch (error) {\n        console.log(error);\n    }\n    return result;\n}\n\n// 取出mLAMB\nexport async function useSushiBarLeave(library, account, token, amount) {\n    // console.log({library, account, token, amount});\n    const contract = usemLAMBContract(library, account, token.address, true);\n    let result;\n    try {\n        const safeGasEstimate = await contract.estimateGas.leave(amount);\n        result = await contract.leave(amount, {\n            gasLimit: calculateGasMargin(safeGasEstimate),\n        });\n    } catch (error) {\n        console.log(error);\n    }\n    return result;\n}","\nimport { useStakingRewardsContract,useTokenContract } from \"./useContract.js\";\nimport { TokenAmount } from \"@webfans/uniswapsdk\";\n\nexport async function useStakingRewardsbalance(library, account, token) {\n  let result;\n  const contract = useStakingRewardsContract(library, account, token.address, false);\n  try {\n    result = await contract.balanceOf(account);\n  } catch (error) {\n    console.log(error);\n  }\n  return new TokenAmount(token, result.toString());\n}\n\n\n\nexport async function useStakingRewardstotalSupply(library, account, token) {\n  let result;\n  const contract = useStakingRewardsContract(library, account, token.address, false);\n  try {\n    result = await contract.totalSupply();\n  } catch (error) {\n    console.log(error);\n  }\n  return new TokenAmount(token, result.toString());\n}\n\n\n\nexport async function useStakingRewardsRead(library, account, token, methodName, parameter) {\n  let result;\n  const contract = useStakingRewardsContract(library, account, token.address, false);\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\nexport function useStakingRewardsContractSigna(\n  library,\n  account,\n  token\n) {\n  const contract = useStakingRewardsContract(library, account, token.address, true);\n\n  // console.log(contract);\n  return contract;\n}\n\nexport async function useTokentotalSupply(\n  library,\n  account,\n  token,\n) {\n  const contract = useTokenContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract.totalSupply();\n  } catch (error) {\n    console.log(error);\n  }\n  return new TokenAmount(token, result.toString());\n}\n\nexport async function useTokenBalance(\n  library,\n  account,\n  token\n) {\n  const contract = useTokenContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract.balanceOf(account);\n  } catch (error) {\n    console.log(error);\n  }\n  return new TokenAmount(token, result.toString());\n}"],"sourceRoot":""}