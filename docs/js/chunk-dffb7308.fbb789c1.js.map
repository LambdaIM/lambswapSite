{"version":3,"sources":["webpack:///./src/contacthelp/ethcom.js","webpack:///./src/contacthelp/ethusdt.js","webpack:///./src/contactLogic/history.js","webpack:///./src/contactLogic/readpairpool.js"],"names":["Web3","require","getTime","web3","window","ethereum","chainConfig","walletconnectRPC","defaultChainID","Promise","resolve","reject","eth","getBlock","error","data","timestamp","getGasPrice","provider","toString","readSwapHistory","chainID","account","pageNum","showNum","swapHistory","forEach","item","method_name","show","removeLiquidityWithPermitformat","txs","swapExactTokensForTokensformat","addLiquidityformat","removeLiquidityWithPermitformatETH","addLiquidityformatETH","swapExactTokensForTokensformatETH","removeLiquidityWithformat","readPledgeHistory","rewardMine","stakeformat","exitformat","getRewardformat","leaveFormat","enterFormat","tokenNameByaddress","address","coinA","_","find","tokens","chainId","toLowerCase","undefined","symbol","tokenNameByaddressStack","LPtoken","lpamount","amount","tokenADDRESSA","amount_token_address","tokenADDRESSB","amountA","amountB","inamount","outamount","tokenA","tokenB","amountLP","poolADDRESS","to","outamountA","outamountB","from","BigNumber","Calculatepercentage","balance","totalSupply","balance_","totalSupply_","div","getTokenList","where","token","readpairpool","library","list","pairlist","pairList","PairList","dataList","element","route","Route","tokenAmounts","liquidityToken","target","one","pair","indexOf","price","pairs","priceOf","push","Pair","toSignificant","pairName","listSymbol","isfirst","pairSymbols","configSymbols","readpairpoolPrice","pairdataList","tokenList","PricePromiseList","coinB","TokenA","Token","decimals","TokenB","pairaddress","getAddress","getpairPrice","all","PriceList","prise24","change","prisechange","Math","abs","readpairLiquidity","callList","TokenContract","useTokenContractMulticall","balanceOf","ethcallProvider","Provider","init","listresult","index","totalSupplyTokenAmount","TokenAmount","balanceTokenAmount","utils","fromWei","aToketotalSupply","getLiquidityValue","bToketotalSupply","aTokenbalance","bTokenbalance","readpariInfo","tokensymbolA","tokensymbolB","Fetcher","fetchPairData","getethProvider","pairInfo","calculationLiquidity","coinATokenAmount","coinBTokenAmount","istargetBToken","invertprice","invert","outputNum","quote","pooltotalSupply","pooltotalSupplyTokenAmount","liquidityMinted","getLiquidityMinted","poolPercentData","divide","add","buildAddliquidityParam","ChainId","allowedSlippage","INITIAL_ALLOWED_SLIPPAGE","amountsMin","CURRENCY_A","calculateSlippageAmount","CURRENCY_B","blockTime","DEFAULT_DEADLINE_FROM_NOW","deadline","coinInfo","getChainCoinInfo","currency","coinName","isBisEth","args","raw","asciiToHex","checkoutTokenAllowance","TokenAContract","TokenBContract","allowance","ROUTER_ADDRESS","tokenAallowance","tokenBallowance","readpariInfoNuminfo","priceinvert","checkApprove","spender","Aallowance","Ballowance","tokenAnotNeed","tokenBnotNeed","aUserin","bUserin","lt","eq","addliquidityGas","parameters","ethamount","contract","getRouterContract","length","estimateGas","addLiquidityETH","value","estimatedGasLimit","addLiquidity","gasPrice","useWEI","mul","fee","sendaddliquidity","gasLimit","calculateGasMargin","result","pairPrice","PriceInfo","Data","innum","outnum","toFixed","infoData","obj","pairAddress","UniswapV2Pair","useIUniswapV2PairABIContractMulticall","token0","token1","getReserves","tokrnAddressA","tokrnAddressB","reserve0","reserve1","sortsBefore","pairListEarn","pairListInfo","resultList","pledgebalance","pairprice","getLPName","A","B"],"mappings":"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","file":"js/chunk-dffb7308.fbb789c1.js","sourcesContent":["const Web3 = require(\"web3\");\nimport chainConfig from '@/config/config.js';\n\n export async function getTime() {\n    const web3 = new Web3(window.ethereum||chainConfig.walletconnectRPC[chainConfig.defaultChainID]);\n    // const getBlock = util.promisify(web3.eth.getBlock)\n    return new Promise((resolve, reject) => {\n     web3.eth.getBlock(\"latest\", (error, data) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(data.timestamp);\n        }\n      });\n    });\n  }","// import gastoken  from  \"@/constants/gastoken.json\";\n\nimport { getNetwork } from '@ethersproject/networks';\nimport { getDefaultProvider } from '@ethersproject/providers';\n\nimport getethProvider from './getethProvider.js';\n\nimport {\n    ChainId,\n    Token,\n    Fetcher,\n    Route,\n    TokenAmount,\n    Router,\n  } from \"@webfans/uniswapsdk\";\n\n// export async function  ethusdt(){\n//     const USDT = gastoken.tokens[0];\n//     const WETH = gastoken.tokens[1];\n\n//     const USDTcoin = new Token(\n//         USDT.chainId,\n//         USDT.address,\n//         USDT.decimals,\n//         USDT.symbol\n//       );\n\n//     const WETHcoin = new Token(\n//         WETH.chainId,\n//         WETH.address,\n//         WETH.decimals,\n//         WETH.symbol\n//       );\n\n  \n  \n//     const pair = await Fetcher.fetchPairData(\n//         USDTcoin,\n//         WETHcoin,\n//         getethProvider(USDTcoin)\n//       );\n//       console.log(pair);\n//       const route = new Route([pair], WETHcoin);\n\n//       const price = route.pairs[0].priceOf(WETHcoin);\n//       console.log('eth to usdt',price.toSignificant(6)) ;\n//       return price.toSignificant(6);\n\n// }\n\nexport async function getGasPrice(provider){\n  const data = await provider.getGasPrice();\n  \n\n  \n  return data.toString();\n\n}","\nimport { swapHistory, buildrHistory, rewardMine } from \"@/constants/apiconfig.js\";\nimport _ from 'underscore';\nimport tokens from \"@/constants/token.json\";\n\nimport LPtoken from \"@/constants/minertoken.json\";\n\nexport async function readSwapHistory(chainID, account, pageNum, showNum) {\n  const data = await swapHistory(account, pageNum, showNum, chainID);\n  //['swapExactTokensForTokens','removeLiquidityWithPermit','addLiquidity']\n\n  data.data.forEach((item) => {\n    if (item.method_name == 'removeLiquidityWithPermit') {\n      item.show = removeLiquidityWithPermitformat(item.txs, chainID);\n    } else if (item.method_name == 'swapExactTokensForTokens') {\n      item.show = swapExactTokensForTokensformat(item.txs, chainID);\n    } else if (item.method_name == 'addLiquidity') {\n      item.show = addLiquidityformat(item.txs, chainID);\n\n    } else if (item.method_name == 'removeLiquidityETHWithPermit') {\n      item.show = removeLiquidityWithPermitformatETH(item.txs, chainID);\n\n    } else if (item.method_name == 'addLiquidityETH') {\n      item.show = addLiquidityformatETH(item.txs, chainID);\n\n    } else if (item.method_name == 'swapExactTokensForETH') {\n      item.show = swapExactTokensForTokensformatETH(item.txs, chainID);\n\n    } else if (item.method_name == 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens') {\n      item.show = removeLiquidityWithPermitformatETH(item.txs, chainID);\n\n    } else if (item.method_name == 'removeLiquidity') {\n      item.show = removeLiquidityWithformat(item.txs, chainID);\n\n    }\n\n    //removeLiquidityETHWithPermitSupportingFeeOnTransferTokens,\n\n\n  });\n\n\n\n  console.log(data);\n  return data;\n\n}\n\nexport async function readPledgeHistory(chainID, account, pageNum, showNum) {\n  const data = await rewardMine(account, pageNum, showNum);\n  //['stake','exit','getReward']\n\n  data.data.forEach((item) => {\n    if (item.method_name == 'stake') {\n      item.show = stakeformat(item.txs, chainID);\n    } else if (item.method_name == 'exit') {\n      item.show = exitformat(item.txs, chainID);\n    } else if (item.method_name == 'getReward') {\n      item.show = getRewardformat(item.txs, chainID);\n    } else if (item.method_name === 'leave') {\n      item.show = leaveFormat(item.txs, chainID);\n    }else if (item.method_name === 'enter') {\n      item.show = enterFormat(item.txs, chainID);\n    }\n  });\n  return data;\n\n}\n\nexport async function readbuildrHistory(chainID, account, pageNum, showNum) {\n  const data = await buildrHistory(account, pageNum, showNum, chainID);\n  //['stake','exit','getReward']\n\n  data.data.forEach((item) => {\n    item.show = proxyformat(item.txs, chainID);\n\n    // if(item.method_name == 'proxyMinted'){\n    //     item.show = proxyformat(item.txs,chainID);\n    // }else if( item.method_name == 'proxyBurned'){\n    //     // item.show = exitformat(item.txs,chainID);\n    // }else if(item.method_name == 'proxyJoined'){\n    //     // item.show = getRewardformat(item.txs,chainID);\n\n    // }else if(item.method_name == 'proxyExited'){\n    //     // item.show = getRewardformat(item.txs,chainID);\n\n    // }else if(item.method_name == 'approval'){\n    //     // item.show = getRewardformat(item.txs,chainID);\n\n    // }\n\n\n  });\n\n  return data;\n\n}\n\nfunction tokenNameByaddress(address, chainID) {\n  const coinA = _.find(tokens.tokens, (item) => {\n    if (item.chainId == chainID && item.address.toLowerCase() == address.toLowerCase()) {\n      return item;\n    }\n    // {chainId:chainID,address:address}\n  });\n  if (coinA == undefined) {\n    return '';\n  }\n  return coinA.symbol;\n\n}\n\nfunction tokenNameByaddressStack(address, chainID) {\n  const coinA = _.find(LPtoken.tokens, (item) => {\n    if (item.chainId == chainID && item.address.toLowerCase() == address.toLowerCase()) {\n      return item;\n    }\n    // {chainId:chainID,address:address}\n  });\n  if (coinA == undefined) {\n    return '';\n  }\n  return coinA.symbol;\n\n}\n\nfunction removeLiquidityWithPermitformat(item, chainID) {\n  const lpamount = item[0].amount;\n  const tokenADDRESSA = item[2].amount_token_address;\n  const tokenADDRESSB = item[3].amount_token_address;\n  const amountA = item[2].amount;\n  const amountB = item[3].amount;\n\n  return {\n    inamount: lpamount,\n    outamount: [amountA, amountB],\n    tokenA: tokenNameByaddress(tokenADDRESSA, chainID),\n    tokenB: tokenNameByaddress(tokenADDRESSB, chainID)\n  };\n\n\n}\n\nfunction removeLiquidityWithPermitformatETH(item, chainID) {\n  const lpamount = item[0].amount;\n  const tokenADDRESSA = item[2].amount_token_address;\n  const tokenADDRESSB = item[3].amount_token_address;\n  const amountA = item[2].amount;\n  const amountB = item[3].amount;\n\n  return {\n    inamount: lpamount,\n    outamount: [amountA, amountB],\n    tokenA: tokenNameByaddress(tokenADDRESSA, chainID),\n    tokenB: tokenNameByaddress(tokenADDRESSB, chainID)\n  };\n\n\n}\n\nfunction removeLiquidityWithformat(item, chainID) {\n  console.log('removeLiquidityWithformat');\n  const lpamount = item[0].amount;\n  const tokenADDRESSA = item[2].amount_token_address;\n  const tokenADDRESSB = item[3].amount_token_address;\n  const amountA = item[2].amount;\n  const amountB = item[3].amount;\n\n  return {\n    inamount: lpamount,\n    outamount: [amountA, amountB],\n    tokenA: tokenNameByaddress(tokenADDRESSA, chainID),\n    tokenB: tokenNameByaddress(tokenADDRESSB, chainID)\n  };\n\n\n}\n\nexport function swapExactTokensForTokensformat(item, chainID) {\n  const inamount = item[0].amount;\n  const outamount = item[1].amount;\n\n  const tokenADDRESSA = item[0].amount_token_address;\n  const tokenADDRESSB = item[1].amount_token_address;\n\n  return {\n    inamount: inamount,\n    outamount: outamount,\n    tokenA: tokenNameByaddress(tokenADDRESSA, chainID),\n    tokenB: tokenNameByaddress(tokenADDRESSB, chainID)\n  };\n\n}\n\nexport function swapExactTokensForTokensformatETH(item, chainID) {\n  const inamount = item[0].amount;\n  const outamount = item[1].amount;\n\n  const tokenADDRESSA = item[0].amount_token_address;\n  const tokenADDRESSB = item[1].amount_token_address;\n\n  return {\n    inamount: inamount,\n    outamount: outamount,\n    tokenA: tokenNameByaddress(tokenADDRESSA, chainID),\n    tokenB: tokenNameByaddress(tokenADDRESSB, chainID)\n  };\n\n}\n\nfunction addLiquidityformat(item, chainID) {\n  const inamount = item[0].amount;\n  const outamount = item[1].amount;\n\n  const tokenADDRESSA = item[0].amount_token_address;\n  const tokenADDRESSB = item[1].amount_token_address;\n\n  const amountLP = item[2].amount;\n\n\n  return {\n    inamount: [inamount, outamount],\n    outamount: amountLP,\n    tokenA: tokenNameByaddress(tokenADDRESSA, chainID),\n    tokenB: tokenNameByaddress(tokenADDRESSB, chainID)\n  };\n\n}\n\n\nfunction addLiquidityformatETH(item, chainID) {\n  const inamount = item[0].amount;\n  const outamount = item[1].amount;\n\n  const tokenADDRESSA = item[0].amount_token_address;\n  const tokenADDRESSB = item[1].amount_token_address;\n\n  const amountLP = item[2].amount;\n\n\n  return {\n    inamount: [inamount, outamount],\n    outamount: amountLP,\n    tokenA: tokenNameByaddress(tokenADDRESSA, chainID),\n    tokenB: tokenNameByaddress(tokenADDRESSB, chainID)\n  };\n\n}\n\n\nfunction stakeformat(item, chainID) {\n  const inamount = item[0].amount;\n\n\n  const tokenADDRESSA = item[0].amount_token_address;\n  const poolADDRESS = item[0].to;\n\n  return {\n    inamount: inamount,\n    poolADDRESS,\n    tokenA: tokenNameByaddressStack(tokenADDRESSA, chainID),\n\n  };\n\n}\n\nfunction exitformat(item, chainID) {\n  const outamountA = item[0].amount;\n  const outamountB = item[1] ? item[1].amount : '';\n\n\n  const tokenADDRESSA = item[0].amount_token_address;\n  const tokenADDRESSB = item[1] ? item[1].amount_token_address : '';\n\n  const poolADDRESS = item[0].from;\n\n  return {\n    outamountA,\n    outamountB,\n    poolADDRESS,\n    tokenA: tokenNameByaddressStack(tokenADDRESSA, chainID),\n    tokenB: tokenNameByaddress(tokenADDRESSB, chainID)\n\n  };\n\n}\n\nfunction getRewardformat(item, chainID) {\n  const inamount = item[0].amount;\n\n\n  const tokenADDRESSA = item[0].amount_token_address;\n  const poolADDRESS = item[0].from;\n\n  return {\n    outamount: inamount,\n    poolADDRESS,\n    tokenA: tokenNameByaddress(tokenADDRESSA, chainID),\n  };\n\n}\n\n\nfunction proxyBurnedformat(item, chainID) {\n  const inamount = item[0].amount;\n\n  const tokenADDRESSA = item[0].amount_token_address;\n\n  return {\n    amount: inamount,\n    tokenA: tokenNameByaddressStack(tokenADDRESSA, chainID),\n\n  };\n}\n\nfunction proxyformat(item, chainID) {\n  const inamount = item[0].amount;\n\n  const tokenADDRESSA = item[0].amount_token_address;\n\n  return {\n    amount: inamount,\n    tokenA: tokenNameByaddress(tokenADDRESSA, chainID),\n\n  };\n}\n\nfunction leaveFormat(item, chainID) {\n  // 取出xmlamb\n  const outamountA =  item[0].amount;\n  // 取出lamb\n  const outamountB = item[1].amount;\n\n  const tokenADDRESSA = item[0].amount_token_address;\n  const tokenADDRESSB = item[1].amount_token_address;\n\n  const poolADDRESS = item[0].amount_token_address;\n  return {\n    outamountA,\n    outamountB,\n    poolADDRESS,\n    tokenA: tokenNameByaddress(tokenADDRESSA, chainID),\n    tokenB: tokenNameByaddress(tokenADDRESSB, chainID)\n  };\n}\n\nfunction enterFormat(item, chainID) {\n  const outamountA = item[0].amount;\n  const tokenADDRESSA = item[0].amount_token_address;\n  const poolADDRESS = item[0].amount_token_address;\n  return {\n    outamountA,\n    poolADDRESS,\n    tokenA: tokenNameByaddress(tokenADDRESSA, chainID),\n  };\n}\n\n","import token from \"@/constants/token.json\";\nimport pairlist from \"@/constants/pairlist.json\";\n\nimport {\n  ChainId, Token, TokenAmount, Fetcher,\n  Route, Percent, Router,Pair\n} from \"@webfans/uniswapsdk\";\n\n// import { useTokenbalance } from \"@/contacthelp/Allowances.js\";\nimport getethProvider from '@/contacthelp/getethProvider.js';\nimport _ from 'underscore';\n\nimport {\n  useTokenContractMulticall,\n  useIUniswapV2PairABIContractMulticall\n} from \"../contacthelp/useContractMulticall.js\";\nimport { Contract, Provider } from '@webfans/ethers-multicall';\nimport { ethers } from 'ethers';\nimport { INITIAL_ALLOWED_SLIPPAGE, ROUTER_ADDRESS } from '@/constants/index.js';\n\nimport { calculateSlippageAmount, getRouterContract, calculateGasMargin } from '@/contacthelp/utils.js';\n\nimport Web3 from 'web3';\n\nimport { getTime } from \"@/contacthelp/ethcom.js\";\n\n\nimport { splitSignature } from \"@ethersproject/bytes\";\nimport { getGasPrice } from '@/contacthelp/ethusdt.js';\n// import bignumber from  \"bignumber.js\"\nconst BigNumber = require(\"bignumber.js\");\n\nimport { pairPrice } from '@/constants/apiconfig.js';\n\nimport { swapExactTokensForTokensformat } from './history.js';\nimport getChainCoinInfo from '@/constants/networkCoinconfig.js';\n\n\n\nfunction Calculatepercentage(balance, totalSupply) {\n  const balance_ = new BigNumber(balance);\n  const totalSupply_ = new BigNumber(totalSupply);\n  return balance_.div(totalSupply_);\n\n\n}\nexport function  getTokenList(chainID){\n   return   _.where(token.tokens, { chainId: chainID });\n}\n\nexport async function readpairpool(chainID, library) {\n  const list = _.where(pairlist, { chainId: chainID });\n  const tokenList = _.where(token.tokens, { chainId: chainID });\n  const callList = [];\n\n  // list.forEach(async element => {\n\n  //   const coinA = _.find(tokenList, { symbol: element.pair[0] });\n  //   const coinB = _.find(tokenList, { symbol: element.pair[1] });\n  //   const TokenA = new Token(coinA.chainId, coinA.address, coinA.decimals, coinA.symbol);\n  //   const TokenB = new Token(coinB.chainId, coinB.address, coinB.decimals, coinB.symbol);\n  //   try {\n  //     const pairCall = Fetcher.fetchPairData(TokenA, TokenB, getethProvider(TokenB));\n  //     callList.push(pairCall);\n  //   } catch (error) {\n  //     console.log(error);\n  //     console.log(coinA.symbol,coinB.symbol);\n\n  //   }\n\n\n  // });\n  let PairList;\n//  try {\n   PairList = await pairList(chainID,library);\n//  } catch (error) {\n//    console.log('error',error,callList);\n//    PairList=[];\n//  }\n\n\n  // console.log(PairList);\n  const dataList = [];\n  /*\n  this.$data.price = price.toSignificant(6);\n  this.$data.invertprice = price.invert().toSignificant(6);\n  */\n  const PricePromiseList = [];\n  PairList.forEach(async element => {\n    const route = new Route([element], element.tokenAmounts[0].token);\n\n    const tokenA = element.tokenAmounts[0].token;\n    const tokenB = element.tokenAmounts[1].token;\n    const pairaddress = element.liquidityToken.address;\n\n    const  target = _.find(list,(one)=>{\n      if(one.pair.indexOf(tokenB.symbol)!=-1&&one.pair.indexOf(tokenA.symbol)!=-1){\n        return  one;\n      }\n    });\n\n    let price  ;\n    if(target.pair[1]==tokenA.symbol){\n       price = route.pairs[0].priceOf(tokenB);\n\n    }else{\n      price = route.pairs[0].priceOf(tokenA);\n\n    }\n\n\n\n    // PricePromiseList.push(getpairPrice(pairaddress, chainID, target.pair[0], target.pair[1]));\n\n    dataList.push({\n      Pair: element,\n      price: price.toSignificant(6),\n      pairName: `${target.pair[0]}/${target.pair[1]}`,\n      listSymbol: target.isfirst=='true'?target.pair[0]:target.pair[1],\n      pairSymbols: [element.tokenAmounts[0].token.symbol, element.tokenAmounts[1].token.symbol],\n      configSymbols: [target.pair[0], target.pair[1]]\n\n    });\n\n  });\n\n  // const PriceList = await Promise.all(PricePromiseList);\n  // console.log('PriceList', PriceList);\n  // dataList.forEach((item) => {\n\n  //   const prise24 = _.find(PriceList, (one) => {\n  //     if (one&&one[item.pairName]) {\n  //       return one;\n\n  //     }\n\n  //   });\n  //   if (prise24) {\n  //     item.prise24 = prise24[item.pairName];\n  //     if (item.price - item.prise24 > 0) {\n  //       item.change = '+';\n  //     } else {\n  //       item.change = '-';\n  //     }\n  //     item.prisechange = Math.abs((item.price - item.prise24) / item.prise24);\n\n\n\n  //   } else {\n  //     item.prisechange = '';\n  //   }\n\n\n\n  // });\n\n  // console.log(dataList);\n  return dataList;\n\n  //     const ethcallProvider = new Provider(library,chainID);\n  //   await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n  //   const result = await ethcallProvider.all(callList);\n  //   console.log(result);\n}\n\nexport async function readpairpoolPrice(chainID, library,pairdataList){\n  const list = _.where(pairlist, { chainId: chainID });\n  const tokenList = _.where(token.tokens, { chainId: chainID });\n  const callList = [];\n  const PricePromiseList=[];\n\n  list.forEach((target)=>{\n\n    const coinA = _.find(tokenList, { symbol: target.pair[0] });\n    const coinB = _.find(tokenList, { symbol: target.pair[1] });\n    const TokenA = new Token(coinA.chainId, coinA.address, coinA.decimals, coinA.symbol);\n    const TokenB = new Token(coinB.chainId, coinB.address, coinB.decimals, coinB.symbol);\n    const pairaddress = Pair.getAddress(TokenA, TokenB);\n\n    PricePromiseList.push(getpairPrice(pairaddress, chainID, target.pair[0], target.pair[1]));\n\n  });\n  const PriceList = await Promise.all(PricePromiseList);\n\n\n   pairdataList.forEach((item) => {\n\n    const prise24 = _.find(PriceList, (one) => {\n      if (one&&one[item.pairName]) {\n        return one;\n\n      }\n\n    });\n    if (prise24) {\n      item.prise24 = prise24[item.pairName];\n      if (item.price - item.prise24 > 0) {\n        item.change = '+';\n      } else {\n        item.change = '-';\n      }\n      item.prisechange = Math.abs((item.price - item.prise24) / item.prise24);\n\n\n\n    } else {\n      item.prisechange = '';\n    }\n\n\n\n  });\n\n  return pairdataList;\n\n\n\n}\n\nexport async function readpairLiquidity(chainID, library, account) {\n  const list = await readpairpool(chainID, library);\n  const callList = [];\n  list.forEach((element) => {\n\n    const TokenContract = useTokenContractMulticall(element.Pair.liquidityToken);\n\n\n    callList.push(TokenContract.totalSupply());\n    if (account != \"\") {\n      callList.push(TokenContract.balanceOf(account));\n    }\n\n\n  });\n\n  const ethcallProvider = new Provider(library, chainID);\n  await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n  const listresult = await ethcallProvider.all(callList);\n\n  console.log(listresult);\n\n\n  list.forEach((item, index) => {\n\n    let balance = '0', totalSupply = '';\n    if (account != '') {\n      totalSupply = listresult[index * 2];\n      balance = listresult[index * 2 + 1];\n    } else {\n      totalSupply = listresult[index];\n    }\n\n\n    const totalSupplyTokenAmount = new TokenAmount(item.Pair.liquidityToken, totalSupply.toString());\n\n    const balanceTokenAmount = new TokenAmount(item.Pair.liquidityToken, balance.toString());\n\n    item.totalSupply = Web3.utils.fromWei(totalSupply.toString());\n    item.balance = Web3.utils.fromWei(balance.toString());\n    console.log('-------');\n\n    item.aToketotalSupply = item.Pair.getLiquidityValue(item.Pair.tokenAmounts[0].token, totalSupplyTokenAmount, totalSupplyTokenAmount, false);\n    item.bToketotalSupply = item.Pair.getLiquidityValue(item.Pair.tokenAmounts[1].token, totalSupplyTokenAmount, totalSupplyTokenAmount, false);\n\n    item.aTokenbalance = item.Pair.getLiquidityValue(item.Pair.tokenAmounts[0].token, totalSupplyTokenAmount, balanceTokenAmount, false).toSignificant(3);\n    item.bTokenbalance = item.Pair.getLiquidityValue(item.Pair.tokenAmounts[1].token, totalSupplyTokenAmount, balanceTokenAmount, false).toSignificant(3);\n\n\n\n  });\n\n  return list;\n\n  // 读取总量\n  //读物我的余额\n  //根据我的余额和总量关系，换算两个币中分别是多少\n}\n\nexport async function readpariInfo(chainID, library, tokensymbolA, tokensymbolB) {\n\n  const tokenList = _.where(token.tokens, { chainId: chainID });\n\n  const coinA = _.find(tokenList, { symbol: tokensymbolA });\n  const coinB = _.find(tokenList, { symbol: tokensymbolB });\n\n  const TokenA = new Token(coinA.chainId, coinA.address, coinA.decimals, coinA.symbol);\n  const TokenB = new Token(coinB.chainId, coinB.address, coinB.decimals, coinB.symbol);\n\n  const pairInfo = await Fetcher.fetchPairData(TokenA, TokenB, getethProvider(TokenB));\n\n  return pairInfo;\n\n\n\n}\n\nexport async function calculationLiquidity(library, chainID, coinATokenAmount, coinBTokenAmount, istargetBToken, account) {\n  console.log('calculationLiquidity');\n\n  const pair = await Fetcher.fetchPairData(\n    coinATokenAmount.token,\n    coinBTokenAmount.token,\n    getethProvider(coinBTokenAmount.token)\n  );\n  // console.log(pair);\n  let route;\n\n  route = new Route([pair], coinATokenAmount.token);\n\n  const price = route.pairs[0].priceOf(coinATokenAmount.token);\n  const invertprice = price.invert();\n\n  let outputNum;\n\n  if (istargetBToken) {\n    outputNum = route.pairs[0].priceOf(coinATokenAmount.token).quote(coinATokenAmount);\n  } else {\n    outputNum = route.pairs[0].priceOf(coinBTokenAmount.token).quote(coinBTokenAmount);\n\n  }\n\n  const TokenContract = useTokenContractMulticall(pair.liquidityToken);\n  const callList = [];\n\n  callList.push(TokenContract.totalSupply());\n  callList.push(TokenContract.balanceOf(account));\n\n  const ethcallProvider = new Provider(library, chainID);\n  await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n  const listresult = await ethcallProvider.all(callList);\n\n  const [pooltotalSupply, mypoolBlance] = listresult;\n\n  const pooltotalSupplyTokenAmount = new TokenAmount(\n    pair.liquidityToken,\n    pooltotalSupply.toString());\n\n  let liquidityMinted;\n\n  if (istargetBToken) {\n    liquidityMinted = pair.getLiquidityMinted(pooltotalSupplyTokenAmount, coinATokenAmount, outputNum);\n  } else {\n    liquidityMinted = pair.getLiquidityMinted(pooltotalSupplyTokenAmount, outputNum, coinBTokenAmount);\n  }\n\n  let poolPercentData = liquidityMinted.divide(pooltotalSupplyTokenAmount.add(liquidityMinted));\n  poolPercentData = poolPercentData.toSignificant(4);\n\n  // if (poolPercentData.multiply(10000).lessThan(1)) {\n  //   poolPercentData = '<0.01';\n  // } else {\n  //   poolPercentData = poolPercentData.multiply(100).toSignificant(4);\n  // }\n\n  return {\n    istargetBToken,\n    outputNum,\n    poolPercentData,\n    price,\n    invertprice,\n    liquidityMinted\n\n  };\n\n\n  //let poolBlance = await this.getTokenbalance(pair.liquidityToken, window.ethersprovider, this.ethAddress);\n  //let poolTotal = await this.getTokenTotalSupply(window.ethersprovider, this.ethAddress, pair.liquidityToken);\n\n\n\n}\n\nexport async function buildAddliquidityParam(coinATokenAmount, coinBTokenAmount, account,ChainId) {\n\n  const allowedSlippage = INITIAL_ALLOWED_SLIPPAGE;\n\n  const amountsMin = {\n    CURRENCY_A: calculateSlippageAmount(coinATokenAmount, allowedSlippage)[0],\n    CURRENCY_B: calculateSlippageAmount(coinBTokenAmount, allowedSlippage)[0],\n  };\n  const blockTime = await getTime();\n  // 20 minutes, denominated in seconds\n  const DEFAULT_DEADLINE_FROM_NOW = 60 * 20;\n\n  const deadline = blockTime + DEFAULT_DEADLINE_FROM_NOW;\n\n  const coinInfo = getChainCoinInfo(ChainId);\n\n  let args ;\n\n  if(coinATokenAmount.currency.symbol ==coinInfo.coinName||\n    coinBTokenAmount.currency.symbol ==coinInfo.coinName){\n      const isBisEth = coinBTokenAmount.currency.symbol ==coinInfo.coinName;\n      args = [\n        isBisEth?coinATokenAmount.currency.address:coinBTokenAmount.currency.address,\n        isBisEth?coinATokenAmount.raw.toString():coinBTokenAmount.raw.toString(),\n        amountsMin['CURRENCY_A'].toString(),\n        amountsMin['CURRENCY_B'].toString(),\n        account,\n        Web3.utils.asciiToHex(deadline + ''),\n      ];\n\n  }else{\n    args = [\n      coinATokenAmount.currency.address,\n      coinBTokenAmount.currency.address,\n      coinATokenAmount.raw.toString(),\n      coinBTokenAmount.raw.toString(),\n      amountsMin['CURRENCY_A'].toString(),\n      amountsMin['CURRENCY_B'].toString(),\n      account,\n      Web3.utils.asciiToHex(deadline + ''),\n    ];\n\n  }\n\n  return args;\n\n}\n\nexport async function checkoutTokenAllowance(tokenA, tokenB, library, chainID, account) {\n\n  // ROUTER_ADDRESS\n\n  const TokenAContract = useTokenContractMulticall(tokenA);\n  const TokenBContract = useTokenContractMulticall(tokenB);\n\n  const callList = [TokenAContract.allowance(account, ROUTER_ADDRESS),\n  TokenBContract.allowance(account, ROUTER_ADDRESS)];\n\n  const ethcallProvider = new Provider(library, chainID);\n  await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n  const listresult = await ethcallProvider.all(callList);\n\n  const [tokenAallowance, tokenBallowance] = listresult;\n\n  return {\n    tokenAallowance,\n    tokenBallowance\n  };\n\n\n\n}\n\n\nexport async function readpariInfoNuminfo(chainID, library, account, tokensymbolA, tokensymbolB) {\n  console.log('readpariInfoNuminfo');\n  const pairInfo = await readpariInfo(chainID, library, tokensymbolA, tokensymbolB);\n  const callList = [];\n\n  const TokenContract = useTokenContractMulticall(pairInfo.liquidityToken);\n\n\n  callList.push(TokenContract.totalSupply());\n  callList.push(TokenContract.balanceOf(account));\n\n  const ethcallProvider = new Provider(library, chainID);\n  await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n  const listresult = await ethcallProvider.all(callList);\n  const totalSupply = listresult[0];\n  const balance = listresult[1];\n\n\n  const totalSupplyTokenAmount = new TokenAmount(pairInfo.liquidityToken, totalSupply.toString());\n  const balanceTokenAmount = new TokenAmount(pairInfo.liquidityToken, balance.toString());\n\n  const aToketotalSupply = pairInfo.getLiquidityValue(pairInfo.tokenAmounts[0].token, totalSupplyTokenAmount, totalSupplyTokenAmount, false);\n  const bToketotalSupply = pairInfo.getLiquidityValue(pairInfo.tokenAmounts[1].token, totalSupplyTokenAmount, totalSupplyTokenAmount, false);\n\n  const aTokenbalance = pairInfo.getLiquidityValue(pairInfo.tokenAmounts[0].token, totalSupplyTokenAmount, balanceTokenAmount, false);\n  const bTokenbalance = pairInfo.getLiquidityValue(pairInfo.tokenAmounts[1].token, totalSupplyTokenAmount, balanceTokenAmount, false);\n\n  const route = new Route([pairInfo], pairInfo.tokenAmounts[0].token);\n  const price = route.pairs[0].priceOf(pairInfo.tokenAmounts[0].token);\n\n  let poolPercentData = Calculatepercentage(balance.toString(), totalSupply.toString());\n  poolPercentData = poolPercentData.toString();\n\n  //  if (poolPercentData.times(10000).isLessThan(1)) {\n  //   poolPercentData = '<0.01';\n  // } else {\n  //   poolPercentData = poolPercentData.times(100).toString();\n  // }\n\n  return {\n    pairInfo,\n    aToketotalSupply,\n    bToketotalSupply,\n    aTokenbalance,\n    bTokenbalance,\n    totalSupply,\n    balance,\n    price,\n    priceinvert: price.invert(),\n    poolPercentData\n  };\n\n}\n\n\nexport async function checkApprove(chainID, library, account, coinATokenAmount, coinBTokenAmount) {\n\n  //coinATokenAmount.token\n  const TokenAContract = useTokenContractMulticall(coinATokenAmount.token);\n  const TokenBContract = useTokenContractMulticall(coinBTokenAmount.token);\n\n  const spender = ROUTER_ADDRESS;\n  const callList = [];\n\n  callList.push(TokenAContract.allowance(account, spender));\n  callList.push(TokenBContract.allowance(account, spender));\n\n  const ethcallProvider = new Provider(library, chainID);\n  await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n  const listresult = await ethcallProvider.all(callList);\n  const [Aallowance, Ballowance] = listresult;\n\n  console.log(Aallowance, Ballowance);\n  let tokenAnotNeed = false, tokenBnotNeed = false;\n  const aUserin = new BigNumber(coinATokenAmount.raw.toString());\n  const bUserin = new BigNumber(coinBTokenAmount.raw.toString());\n\n  if (aUserin.lt(Aallowance.toString()) || aUserin.eq(Aallowance.toString())) {\n    tokenAnotNeed = true;\n  }\n\n  if (bUserin.lt(Ballowance.toString()) || bUserin.eq(Ballowance.toString())) {\n    tokenBnotNeed = true;\n  }\n\n  // const tokenAnotNeed = coinATokenAmount.isLessThanOrEqualTo(Aallowance.toString());\n\n  // const tokenBnotNeed = coinBTokenAmount.isLessThanOrEqualTo(Ballowance.toString());\n\n  return {\n    tokenAnotNeed,\n    tokenBnotNeed\n  };\n\n\n}\n\nexport async function addliquidityGas(chainID, library, account, parameters,ethamount) {\n  const contract = getRouterContract(chainID, library, account);\n\n  let  estimatedGasLimit;\n\n  if(parameters.length== 6){\n    estimatedGasLimit = await contract.estimateGas.addLiquidityETH(...parameters, {value:ethamount});\n  }else{\n    estimatedGasLimit = await contract.estimateGas.addLiquidity(...parameters, {});\n  }\n\n  const gasPrice = await getGasPrice(library);\n\n  const useWEI = estimatedGasLimit.mul(gasPrice);\n  const fee = Web3.utils.fromWei(useWEI.toString());\n\n  return fee;\n}\n\nexport async function sendaddliquidity(chainID, library, account, parameters,ethamount) {\n\n  const contract = getRouterContract(chainID, library, account);\n\n  let  estimatedGasLimit;\n  if(parameters.length== 6){\n    estimatedGasLimit = await contract.estimateGas.addLiquidityETH(...parameters, {value:ethamount});\n }else{\n   estimatedGasLimit = await contract.estimateGas.addLiquidity(...parameters, {});\n }\n\n let result ;\n if(parameters.length== 6){\n    result = await contract.addLiquidityETH(...parameters, {\n      ...{\n        value:ethamount\n      },\n     gasLimit: calculateGasMargin(estimatedGasLimit),\n   });\n\n }else{\n     result = await contract.addLiquidity(...parameters, {\n     ...{},\n     gasLimit: calculateGasMargin(estimatedGasLimit),\n   });\n\n }\n  return result;\n\n}\n\nexport async function getpairPrice(pairaddress, chainID, tokenA, tokenB) {\n  console.log('getpairPrice');\n  const data = await pairPrice(pairaddress);\n  if (data == '') {\n    return null;\n  }\n  const PriceInfo = swapExactTokensForTokensformat(data.Data.txs, chainID, tokenA, tokenB);\n  // inamount: \"1000000000000000000\"\n  // outamount: \"187379656538552111\"\n  // tokenA: \"USDT\"\n  // tokenB: \"scUSD\"\n  if (!PriceInfo) {\n    return null;\n  }\n\n\n  const innum = new BigNumber(PriceInfo.inamount);\n  const outnum = new BigNumber(PriceInfo.outamount);\n\n  const infoData = {\n    [PriceInfo.tokenA+\"/\"+PriceInfo.tokenB]:outnum.div(innum).toFixed(8),\n    [PriceInfo.tokenB+\"/\"+PriceInfo.tokenA]:innum.div(outnum).toFixed(8),\n  };\n  const obj = {};\n  obj[tokenA + '/' + tokenB] = infoData[tokenA + '/' + tokenB];\n  return obj;\n\n\n}\n\nexport async function pairList(chainID,library){\n  const list = _.where(pairlist, { chainId: chainID });\n  const tokenList = _.where(token.tokens, { chainId: chainID });\n  const callList = [];\n\n  console.log('pairList');\n\n  list.forEach(async element => {\n\n    const coinA = _.find(tokenList, { symbol: element.pair[0] });\n    const coinB = _.find(tokenList, { symbol: element.pair[1] });\n    const TokenA = new Token(coinA.chainId, coinA.address, coinA.decimals, coinA.symbol);\n    const TokenB = new Token(coinB.chainId, coinB.address, coinB.decimals, coinB.symbol);\n    const pairAddress = Pair.getAddress(TokenA, TokenB);\n    // console.log(TokenA, TokenB,pairAddress);\n\n    const UniswapV2Pair = useIUniswapV2PairABIContractMulticall({address:pairAddress});\n\n    callList.push(UniswapV2Pair.token0());\n    callList.push(UniswapV2Pair.token1());\n    callList.push(UniswapV2Pair.getReserves());\n\n\n  });\n\n  const ethcallProvider = new Provider(library,chainID);\n    await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n    const result = await ethcallProvider.all(callList);\n    // console.log(result);\n    const pairList = [];\n    for (let index = 0; index < result.length; index+=3) {\n      const tokrnAddressA = result[index];\n      const tokrnAddressB = result[index+1];\n      const [reserve0, reserve1] = result[index+2];\n\n      const coinA = _.find(tokenList, (item)=>{\n          return item.address.toLowerCase() == tokrnAddressA.toLowerCase();\n      });\n      const coinB = _.find(tokenList, (item)=>{\n          return item.address.toLowerCase() == tokrnAddressB.toLowerCase();\n        });\n\n      const TokenA = new Token(coinA.chainId, coinA.address, coinA.decimals, coinA.symbol);\n      const TokenB = new Token(coinB.chainId, coinB.address, coinB.decimals, coinB.symbol);\n\n      const tokens = [TokenA,TokenB];\n      const [token0, token1] = tokens[0].sortsBefore(tokens[1]) ? tokens : [tokens[1], tokens[0]];\n\n      const pair = new Pair(new TokenAmount(token0, reserve0), new TokenAmount(token1, reserve1));\n      // console.log(pair);\n      pairList.push(pair);\n\n    }\n\n    return pairList;\n\n}\n\nexport async function pairListEarn(chainID, library) {\n  console.log('pairListEarn');\n  // const pairInfo = await readpariInfo(chainID, library, tokensymbolA, tokensymbolB);\n  const pairListInfo = await pairList(chainID,library);\n  const callList = [];\n\n  pairListInfo.forEach((pairInfo)=>{\n    const TokenContract = useTokenContractMulticall(pairInfo.liquidityToken);\n      callList.push(TokenContract.totalSupply());\n  });\n\n\n\n  //  callList.push(TokenContract.balanceOf(account));\n\n  const ethcallProvider = new Provider(library, chainID);\n  await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n  const listresult = await ethcallProvider.all(callList);\n  const resultList =[];\n\n  pairListInfo.forEach((pairInfo,index)=>{\n    const totalSupply = listresult[index];\n\n    const totalSupplyTokenAmount = new TokenAmount(pairInfo.liquidityToken, totalSupply.toString());\n\n\n\n    //  const aToketotalSupply = pairInfo.getLiquidityValue(pairInfo.tokenAmounts[0].token, totalSupplyTokenAmount, totalSupplyTokenAmount, false);\n    //  const bToketotalSupply = pairInfo.getLiquidityValue(pairInfo.tokenAmounts[1].token, totalSupplyTokenAmount, totalSupplyTokenAmount, false);\n\n    const aTokenbalance = (pledgebalance)=>{\n      const balanceTokenAmount = new TokenAmount(pairInfo.liquidityToken, pledgebalance.toString());\n     return pairInfo.getLiquidityValue(pairInfo.tokenAmounts[0].token, totalSupplyTokenAmount, balanceTokenAmount, false);\n\n    };\n    const bTokenbalance =(pledgebalance)=>{\n      const balanceTokenAmount = new TokenAmount(pairInfo.liquidityToken, pledgebalance.toString());\n     return pairInfo.getLiquidityValue(pairInfo.tokenAmounts[1].token, totalSupplyTokenAmount, balanceTokenAmount, false);\n    };\n\n    const route = new Route([pairInfo], pairInfo.tokenAmounts[0].token);\n    //tokensymbolA, tokensymbolB\n\n    const price=(tokensymbolA,tokensymbolB)=>{\n      let price;\n      const pairprice={};\n      if(tokensymbolB ==  pairInfo.tokenAmounts[0].token.symbol){\n        price = route.pairs[0].priceOf(pairInfo.tokenAmounts[1].token);\n        pairprice[tokensymbolA+\"/\"+tokensymbolB] = route.pairs[0].priceOf(pairInfo.tokenAmounts[1].token).toSignificant(6);\n        pairprice[tokensymbolB+\"/\"+tokensymbolA] = route.pairs[0].priceOf(pairInfo.tokenAmounts[0].token).toSignificant(6);\n      }else{\n        price = route.pairs[0].priceOf(pairInfo.tokenAmounts[0].token);\n        pairprice[tokensymbolB+\"/\"+tokensymbolA] = route.pairs[0].priceOf(pairInfo.tokenAmounts[1].token).toSignificant(6);\n        pairprice[tokensymbolA+\"/\"+tokensymbolB] = route.pairs[0].priceOf(pairInfo.tokenAmounts[0].token).toSignificant(6);\n      }\n      return {\n        price,\n        pairprice,\n        priceinvert: price.invert(),\n      };\n\n    };\n\n\n\n    resultList.push({\n      pairInfo,\n      // aToketotalSupply,\n      // bToketotalSupply,\n      aTokenbalance,\n      bTokenbalance,\n      totalSupply,\n      price,\n      // priceinvert: price.invert(),\n      // pairprice\n\n    });\n\n  });\n\n\n  //  const  balance = listresult[1];\n\n\n  // console.log(pairprice);\n\n\n\n  return resultList;\n\n}\n\n\n\n/*\nroute = new Route([pair], coinATokenAmount.token);\n\n            var price = route.pairs[0].priceOf(coinATokenAmount.token);\n\nthis.$data.price = price.toSignificant(6);\n            this.$data.invertprice = price.invert().toSignificant(6);\n*/\n\n\n/*\nasync function getPairs(pairList) {\n    var userpairList = [] ;\n    for (let index = 0; index < pairList.length; index++) {\n      const element = pairList[index];\n      const TokenA = new Token(element.coinA.chainId,element.coinA.address,element.coinA.decimals,element.coinA.symbol);\n      const TokenB = new Token(element.coinB.chainId,element.coinB.address,element.coinB.decimals,element.coinB.symbol);\n      try {\n        const pair = await Fetcher.fetchPairData(TokenA, TokenB,getethProvider(TokenB));\n        console.log(pair)\n        userpairList.push(pair)\n\n      } catch (error) {\n          console.log('not find the pair',TokenA,TokenB)\n\n      }\n\n    }\n    return  userpairList;\n\n  }\n\nasync function checkPairsUserbalance(pairList,library, account){\n    var list = [];\n    for (let index = 0; index < pairList.length; index++) {\n        const element = pairList[index];\n        var data = await getbalance(element.liquidityToken,library, account);\n        pairList[index].userbalance = data;\n        // if(data.greaterThan(0)){\n            list.push(pairList[index])\n        // }\n\n\n    }\n     return list ;\n\n}\n\n\n*/\n\nexport async function readpariInfoNuminfoEarn(chainID, library, tokensymbolA, tokensymbolB, pledgebalance) {\n  // console.log('readpariInfoNuminfo');\n  const pairInfo = await readpariInfo(chainID, library, tokensymbolA, tokensymbolB);\n  const callList = [];\n\n  const TokenContract = useTokenContractMulticall(pairInfo.liquidityToken);\n\n\n  callList.push(TokenContract.totalSupply());\n  //  callList.push(TokenContract.balanceOf(account));\n\n  const ethcallProvider = new Provider(library, chainID);\n  await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n  const listresult = await ethcallProvider.all(callList);\n  const totalSupply = listresult[0];\n  //  const  balance = listresult[1];\n\n\n  const totalSupplyTokenAmount = new TokenAmount(pairInfo.liquidityToken, totalSupply.toString());\n  const balanceTokenAmount = new TokenAmount(pairInfo.liquidityToken, pledgebalance.toString());\n\n  //  const aToketotalSupply = pairInfo.getLiquidityValue(pairInfo.tokenAmounts[0].token, totalSupplyTokenAmount, totalSupplyTokenAmount, false);\n  //  const bToketotalSupply = pairInfo.getLiquidityValue(pairInfo.tokenAmounts[1].token, totalSupplyTokenAmount, totalSupplyTokenAmount, false);\n\n  const aTokenbalance = pairInfo.getLiquidityValue(pairInfo.tokenAmounts[0].token, totalSupplyTokenAmount, balanceTokenAmount, false);\n  const bTokenbalance = pairInfo.getLiquidityValue(pairInfo.tokenAmounts[1].token, totalSupplyTokenAmount, balanceTokenAmount, false);\n\n  const route = new Route([pairInfo], pairInfo.tokenAmounts[0].token);\n  //tokensymbolA, tokensymbolB\n  const pairprice={};\n  let price;\n  if(tokensymbolB ==  pairInfo.tokenAmounts[0].token.symbol){\n    price = route.pairs[0].priceOf(pairInfo.tokenAmounts[1].token);\n    pairprice[tokensymbolA+\"/\"+tokensymbolB] = route.pairs[0].priceOf(pairInfo.tokenAmounts[1].token).toSignificant(6);\n    pairprice[tokensymbolB+\"/\"+tokensymbolA] = route.pairs[0].priceOf(pairInfo.tokenAmounts[0].token).toSignificant(6);\n  }else{\n    price = route.pairs[0].priceOf(pairInfo.tokenAmounts[0].token);\n    pairprice[tokensymbolB+\"/\"+tokensymbolA] = route.pairs[0].priceOf(pairInfo.tokenAmounts[1].token).toSignificant(6);\n    pairprice[tokensymbolA+\"/\"+tokensymbolB] = route.pairs[0].priceOf(pairInfo.tokenAmounts[0].token).toSignificant(6);\n  }\n  // console.log(pairprice);\n\n\n\n  return {\n    pairInfo,\n    // aToketotalSupply,\n    // bToketotalSupply,\n    aTokenbalance,\n    bTokenbalance,\n    totalSupply,\n    price,\n    priceinvert: price.invert(),\n    pairprice\n\n  };\n\n}\n\nexport function getLPName(A,B,chainID){\n  const list = _.where(pairlist, { chainId: chainID });\n  const  target = _.find(list,(one)=>{\n    if(one.pair.indexOf(B)!=-1&&one.pair.indexOf(A)!=-1){\n      return  one;\n    }\n  });\n  if(target){\n    return {\n      pairName:target.pair[0]+\"/\"+target.pair[1],\n      listSymbol: target.pair[0],\n    };\n\n  }else{\n    return {\n      pairName:'--',\n      listSymbol: '--',\n    };\n\n  }\n\n\n}"],"sourceRoot":""}